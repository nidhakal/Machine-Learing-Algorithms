{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.9"
    },
    "nav_menu": {},
    "toc": {
      "navigate_menu": true,
      "number_sections": true,
      "sideBar": true,
      "threshold": 6,
      "toc_cell": false,
      "toc_section_display": "block",
      "toc_window_display": false
    },
    "colab": {
      "name": "Copy of 16_nlp_with_rnns_and_attention.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "akztsn_Lqkc8"
      },
      "source": [
        "**Chapter 16 – Natural Language Processing with RNNs and Attention**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6WB3ZzgUqkdG"
      },
      "source": [
        "_This notebook contains all the sample code in chapter 16._"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vwXwH8QEqkdH"
      },
      "source": [
        "<table align=\"left\">\n",
        "  <td>\n",
        "    <a target=\"_blank\" href=\"https://colab.research.google.com/github/ageron/handson-ml2/blob/master/16_nlp_with_rnns_and_attention.ipynb\"><img src=\"https://www.tensorflow.org/images/colab_logo_32px.png\" />Run in Google Colab</a>\n",
        "  </td>\n",
        "</table>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xsvczQESqkdH"
      },
      "source": [
        "# Setup"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "72B0cYoPqkdH"
      },
      "source": [
        "First, let's import a few common modules, ensure MatplotLib plots figures inline and prepare a function to save the figures. We also check that Python 3.5 or later is installed (although Python 2.x may work, it is deprecated so we strongly recommend you use Python 3 instead), as well as Scikit-Learn ≥0.20 and TensorFlow ≥2.0.\n",
        "\n",
        "\n",
        "\n",
        "Following the 'recipe' for the \"very basic seq2seq model\", build and train a system that translates for loops into while loops and see what kind of performance you can get. Make sure you use the padding trick introduced to fix the problem with different length inputs! Three suggestions: Just use the ASCII values of characters as the character IDs. Find a reasonable maximum output size and pad all the training targets to that size. And don't be afraid to play around with the embedding size if things don't work with the initial value.\n",
        "Optional, but I hope some of you do this: rework the data generation to produce two versions of the same code, where the input has had all whitespace and indentation removed and the target string has reasonable spacing and indentation. Learn to format code with nice spacing and indentation.\n",
        "In addition, you should also keep progress notes, which will become part of your submission. At the bottom of your notebook, make a single text cell for these notes. Your notes should include two kinds of entries: problems and investigations. Problem entries should read like this: \"I (or We) had <problem> in the cell that did <something>. I/We fixed this by <remedy>.\" Investigation entries should read like this: \"I/We didn't understand <something>. We found an explanation at <link> (or perhaps, we talked to <person>) and now I/We understand it.\"\n",
        "You may add other kinds of progress entries as you see fit, e.g. \"I figured out a clever way to do <something>.\" But you should have at least 5 problem and 5 investigation entries."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vZMn5ddLqkdI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0d1700e2-e9a3-462f-c91b-f7ea74e26073"
      },
      "source": [
        "# Python ≥3.5 is required\n",
        "import sys\n",
        "assert sys.version_info >= (3, 5)\n",
        "\n",
        "# Scikit-Learn ≥0.20 is required\n",
        "import sklearn\n",
        "assert sklearn.__version__ >= \"0.20\"\n",
        "\n",
        "try:\n",
        "    # %tensorflow_version only exists in Colab.\n",
        "    %tensorflow_version 2.x\n",
        "    !pip install -q -U tensorflow-addons\n",
        "    !pip install -q -U transformers\n",
        "    IS_COLAB = True\n",
        "except Exception:\n",
        "    IS_COLAB = False\n",
        "\n",
        "# TensorFlow ≥2.0 is required\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "assert tf.__version__ >= \"2.0\"\n",
        "\n",
        "if not tf.config.list_physical_devices('GPU'):\n",
        "    print(\"No GPU was detected. LSTMs and CNNs can be very slow without a GPU.\")\n",
        "    if IS_COLAB:\n",
        "        print(\"Go to Runtime > Change runtime and select a GPU hardware accelerator.\")\n",
        "\n",
        "# Common imports\n",
        "import numpy as np\n",
        "import os\n",
        "\n",
        "# to make this notebook's output stable across runs\n",
        "np.random.seed(42)\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "# To plot pretty figures\n",
        "%matplotlib inline\n",
        "import matplotlib as mpl\n",
        "import matplotlib.pyplot as plt\n",
        "mpl.rc('axes', labelsize=14)\n",
        "mpl.rc('xtick', labelsize=12)\n",
        "mpl.rc('ytick', labelsize=12)\n",
        "\n",
        "# Where to save the figures\n",
        "PROJECT_ROOT_DIR = \".\"\n",
        "CHAPTER_ID = \"nlp\"\n",
        "IMAGES_PATH = os.path.join(PROJECT_ROOT_DIR, \"images\", CHAPTER_ID)\n",
        "os.makedirs(IMAGES_PATH, exist_ok=True)\n",
        "\n",
        "def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n",
        "    path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)\n",
        "    print(\"Saving figure\", fig_id)\n",
        "    if tight_layout:\n",
        "        plt.tight_layout()\n",
        "    plt.savefig(path, format=fig_extension, dpi=resolution)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[K     |████████████████████████████████| 686kB 8.9MB/s \n",
            "\u001b[K     |████████████████████████████████| 2.3MB 8.6MB/s \n",
            "\u001b[K     |████████████████████████████████| 3.3MB 37.6MB/s \n",
            "\u001b[K     |████████████████████████████████| 901kB 35.3MB/s \n",
            "\u001b[?25h"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gpL4yXfHqv9U",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "056bb6f7-acfa-4f32-9d30-252230f6c3d9"
      },
      "source": [
        "import random\n",
        "import pandas as pd\n",
        "\n",
        "vars = (\"x\", \"y\", \"z\", \"current\", \"head\", \"curr\", \"i\", \"idx\", \"index\", \"j\")\n",
        "inits = (\" 0\", \"0\", \" -1000\", \"-42\", \"list->head\")\n",
        "conds = (\">\", \"<=\", \" == \", \" < \")\n",
        "limits = (\"10\", \"42\", \"NULL\", \"100000\", \"-45\", \"LIMIT\")\n",
        "incrs = (\"++\", \"+=2\", \"+=100\", \"-=20\")\n",
        "bodys = (\"sum += x;\", \"var-;\", \"print(x);\", \"open(text.txt);\", \"random(x);\")\n",
        "\n",
        "\n",
        "def genForLoop(var, init, cond, limit, incr, body):\n",
        "    return F\"for({var} = {init}; {var}{cond}{limit}; {var}{incr}) {{\\n\\t{body}\\n}}\"\n",
        "\n",
        "def genWhileLoop(var, init, cond, limit, incr, body):\n",
        "    return F\"{var} = {init};\\nwhile({var}{cond}{limit}) {{\\n\\t{body}\\n\\t{var}{incr};\\n}}\"\n",
        "\n",
        "\n",
        "def genLoopPairs(count):\n",
        "    ret = list()\n",
        "    for c in range(count):\n",
        "        var = random.choice(vars)\n",
        "        init = random.choice(inits)\n",
        "        cond = random.choice(conds)\n",
        "        limit = random.choice(limits)\n",
        "        incr = random.choice(incrs)\n",
        "        body = random.choice(bodys)\n",
        "        pair = (F\"for({var} = {init}; {var}{cond}{limit}; {var}{incr}) {{\\n\\t{body}\\n}}\",\n",
        "                F\"{var} = {init};\\nwhile({var}{cond}{limit}) {{\\n\\t{body}\\n\\t{var}{incr};\\n}}\")\n",
        "        ret.append(pair)\n",
        "    df = pd.DataFrame(ret, columns=[\"for\",\"while\"])\n",
        "    return df[\"for\"], df[\"while\"]\n",
        "\n",
        "\n",
        "\n",
        "pairs = genLoopPairs(16000)\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "for     NaN\n",
              "while   NaN\n",
              "Name: while, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c5ukEEDAqkd4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "e8e7c6a2-4f82-42f3-d0f0-537d3d0fc633"
      },
      "source": [
        "INPUT_CHARS = \"\".join(sorted(set(\"for\"+\"\".join(vars) + \"\".join(inits) + \"\".join(conds) + \"\".join(limits) + \"\".join(incrs)+ \"\".join(bodys)+ \"{\"+\"}\")))\n",
        "INPUT_CHARS"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "' ()+-.01245;<=>ILMNTUacdefhijlmnoprstuvxyz{}'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fYlRSuEBqkd4"
      },
      "source": [
        "And here's the list of possible characters in the outputs:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P4ORzEGzqkd4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "bb99735a-f7de-48e8-cd56-4d331f5aa880"
      },
      "source": [
        "OUTPUT_CHARS =  \"\".join(sorted(set(\"while\"+\"\".join(vars) + \"\".join(inits) + \"\".join(conds) + \"\".join(limits) + \"\".join(incrs)+ \"\".join(bodys)+ \"{\"+\"}\")))\n",
        "OUTPUT_CHARS"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "' ()+-.01245;<=>ILMNTUacdehijlmnoprstuvwxyz{}'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "injvwnHdqkd4"
      },
      "source": [
        "Let's write a function to convert a string to a list of character IDs, as we did in the previous exercise:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aWQLD8xUqkd4"
      },
      "source": [
        "#converting the input to ascii\n",
        "def loop_to_ids(date_str, chars=INPUT_CHARS):\n",
        "    return [ord(c) for c in date_str]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o1_gRMPQqkd4"
      },
      "source": [
        "#helper for ascii conversion\n",
        "def prepare_loop_strs(loop_strs, chars=INPUT_CHARS):\n",
        "    X_ids = [loop_to_ids(lp, chars) for lp in loop_strs]\n",
        "    X = tf.ragged.constant(X_ids, ragged_rank=1)\n",
        "    return (X + 1).to_tensor() # using 0 as the padding token ID\n",
        "\n",
        "\n",
        "def create_dataset(num):\n",
        "    x, y = genLoopPairs(num)\n",
        "    #print(x.shape, y,shape//)\n",
        "    return prepare_loop_strs(x, INPUT_CHARS), prepare_loop_strs(y, OUTPUT_CHARS)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "osNylhd3qkd5"
      },
      "source": [
        "np.random.seed(42)\n",
        "\n",
        "X, Y = create_dataset(16000)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M1oyFs7Fqkd5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1701b2ab-b764-4236-ccea-38be389ead47"
      },
      "source": [
        "print(X[1])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tf.Tensor(\n",
            "[103 112 115  41 121  33  62  33  46  53  51  60  33 121  61  62  79  86\n",
            "  77  77  60  33 121  44  62  50  49  49  42  33 124  11  10 113 115 106\n",
            " 111 117  41 121  42  60  11 126   0   0   0   0   0   0   0   0   0   0\n",
            "   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
            "   0   0   0   0   0   0], shape=(78,), dtype=int32)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4oDmEbs7LdPN",
        "outputId": "e311d7e9-4c78-4054-887e-d27cb6220b68"
      },
      "source": [
        "print(Y[15000])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tf.Tensor(\n",
            "[100 118 115 115 102 111 117  33  62  33  49  60  11 120 105 106 109 102\n",
            "  41 100 118 115 115 102 111 117  33  62  62  33  46  53  54  42  33 124\n",
            "  11  10 119  98 115  46  60  11  10 100 118 115 115 102 111 117  44  44\n",
            "  60  11 126   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
            "   0   0   0   0   0   0   0   0   0], shape=(81,), dtype=int32)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_9PJeqUTLoO2"
      },
      "source": [
        "x_train = X[0:12000]\n",
        "y_train = Y[0:12000]\n",
        "x_val = X[12001:14000]\n",
        "y_val = Y[12001:14000]\n",
        "x_test = X[14001:16000]\n",
        "y_test = Y[14001:16000]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tmHtk-msLn1-"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oVeO6qfHyFNJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b6369df9-ec0b-4dd9-bdf6-52345c0edbb5"
      },
      "source": [
        "\n",
        "embedding_size = 128\n",
        "max_input_length = x_train.shape[1]\n",
        "max_output_length = y_train.shape[1]\n",
        "print(len(INPUT_CHARS), max_input_length, max_output_length)\n",
        "np.random.seed(42)\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "encoder = keras.models.Sequential([\n",
        "    keras.layers.Embedding(input_dim=128,\n",
        "                           output_dim=embedding_size,\n",
        "                           input_shape=[None]),\n",
        "    keras.layers.LSTM(128)\n",
        "])\n",
        "\n",
        "decoder = keras.models.Sequential([\n",
        "    keras.layers.LSTM(128, return_sequences=True),\n",
        "    keras.layers.Dense(128, activation=\"softmax\")\n",
        "])\n",
        "\n",
        "model = keras.models.Sequential([\n",
        "    encoder,\n",
        "    keras.layers.RepeatVector(max_output_length),\n",
        "    decoder\n",
        "])\n",
        "#changed optimizer for better accuracy learning rate was too high\n",
        "optimizer = keras.optimizers.Adam()\n",
        "model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=optimizer,\n",
        "              metrics=[\"accuracy\"])\n",
        "history = model.fit(x_train, y_train, epochs=20,\n",
        "                    validation_data=(x_val, y_val))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "45 79 82\n",
            "Epoch 1/20\n",
            "375/375 [==============================] - 24s 57ms/step - loss: 2.8465 - accuracy: 0.3702 - val_loss: 2.1989 - val_accuracy: 0.4192\n",
            "Epoch 2/20\n",
            "375/375 [==============================] - 21s 55ms/step - loss: 2.1754 - accuracy: 0.4206 - val_loss: 1.8966 - val_accuracy: 0.4479\n",
            "Epoch 3/20\n",
            "375/375 [==============================] - 21s 55ms/step - loss: 1.7929 - accuracy: 0.4549 - val_loss: 1.5548 - val_accuracy: 0.4917\n",
            "Epoch 4/20\n",
            "375/375 [==============================] - 21s 55ms/step - loss: 1.4567 - accuracy: 0.5124 - val_loss: 1.2815 - val_accuracy: 0.5453\n",
            "Epoch 5/20\n",
            "375/375 [==============================] - 21s 55ms/step - loss: 1.2625 - accuracy: 0.5534 - val_loss: 1.1478 - val_accuracy: 0.5807\n",
            "Epoch 6/20\n",
            "375/375 [==============================] - 21s 55ms/step - loss: 1.1394 - accuracy: 0.5845 - val_loss: 0.9765 - val_accuracy: 0.6473\n",
            "Epoch 7/20\n",
            "375/375 [==============================] - 21s 55ms/step - loss: 0.9620 - accuracy: 0.6489 - val_loss: 0.9322 - val_accuracy: 0.6596\n",
            "Epoch 8/20\n",
            "375/375 [==============================] - 21s 55ms/step - loss: 0.9130 - accuracy: 0.6638 - val_loss: 0.7842 - val_accuracy: 0.7169\n",
            "Epoch 9/20\n",
            "375/375 [==============================] - 21s 55ms/step - loss: 0.7866 - accuracy: 0.7125 - val_loss: 0.6733 - val_accuracy: 0.7561\n",
            "Epoch 10/20\n",
            "375/375 [==============================] - 21s 55ms/step - loss: 0.6612 - accuracy: 0.7639 - val_loss: 0.7350 - val_accuracy: 0.7014\n",
            "Epoch 11/20\n",
            "375/375 [==============================] - 21s 55ms/step - loss: 0.6006 - accuracy: 0.7858 - val_loss: 0.6159 - val_accuracy: 0.7611\n",
            "Epoch 12/20\n",
            "375/375 [==============================] - 21s 55ms/step - loss: 0.5707 - accuracy: 0.7956 - val_loss: 0.4249 - val_accuracy: 0.8698\n",
            "Epoch 13/20\n",
            "375/375 [==============================] - 21s 55ms/step - loss: 0.4572 - accuracy: 0.8463 - val_loss: 0.4000 - val_accuracy: 0.8635\n",
            "Epoch 14/20\n",
            "375/375 [==============================] - 21s 55ms/step - loss: 0.6493 - accuracy: 0.8085 - val_loss: 0.3423 - val_accuracy: 0.8958\n",
            "Epoch 15/20\n",
            "375/375 [==============================] - 21s 55ms/step - loss: 0.3902 - accuracy: 0.8719 - val_loss: 0.3010 - val_accuracy: 0.9103\n",
            "Epoch 16/20\n",
            "375/375 [==============================] - 21s 55ms/step - loss: 0.2839 - accuracy: 0.9146 - val_loss: 0.2568 - val_accuracy: 0.9218\n",
            "Epoch 17/20\n",
            "375/375 [==============================] - 21s 55ms/step - loss: 0.2486 - accuracy: 0.9218 - val_loss: 0.2305 - val_accuracy: 0.9260\n",
            "Epoch 18/20\n",
            "375/375 [==============================] - 21s 55ms/step - loss: 0.5093 - accuracy: 0.8405 - val_loss: 0.2389 - val_accuracy: 0.9256\n",
            "Epoch 19/20\n",
            "375/375 [==============================] - 21s 55ms/step - loss: 0.2291 - accuracy: 0.9272 - val_loss: 0.2073 - val_accuracy: 0.9335\n",
            "Epoch 20/20\n",
            "375/375 [==============================] - 21s 55ms/step - loss: 0.2092 - accuracy: 0.9345 - val_loss: 0.2956 - val_accuracy: 0.9019\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CG4DmiodkjfF",
        "outputId": "a034a6f0-08ce-4780-f6b8-951ee38b8a7d"
      },
      "source": [
        "y_pred = model.predict(x_test)\n",
        "y_pred[1][1]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1.7304744e-07, 1.0198947e-09, 1.6285319e-09, 2.1573965e-09,\n",
              "       2.5840559e-09, 1.6212083e-09, 1.2076488e-09, 3.3574763e-09,\n",
              "       7.2797579e-10, 8.5838375e-10, 1.1703553e-12, 4.8880279e-12,\n",
              "       2.2960243e-09, 1.8934190e-09, 2.0978035e-09, 4.4858468e-09,\n",
              "       9.2439292e-09, 1.5568039e-09, 3.2410583e-09, 2.9867027e-09,\n",
              "       3.4886403e-09, 1.0266419e-09, 1.3375308e-09, 1.1717062e-09,\n",
              "       2.4631381e-09, 3.3436343e-09, 1.7437438e-09, 1.9186415e-09,\n",
              "       2.0223887e-09, 4.6646589e-09, 5.1491145e-09, 4.5773598e-09,\n",
              "       2.4566307e-09, 9.9912602e-01, 8.2602341e-08, 5.1574300e-09,\n",
              "       1.8407702e-09, 3.2359870e-09, 2.7534535e-09, 1.5073814e-09,\n",
              "       9.9630126e-10, 5.8545396e-10, 3.1351761e-09, 1.5428513e-09,\n",
              "       2.8043860e-07, 1.2823175e-09, 2.4611964e-07, 9.7917741e-08,\n",
              "       1.3746163e-09, 8.7446715e-08, 1.6907691e-08, 1.5795790e-11,\n",
              "       1.0919523e-09, 9.2292257e-11, 2.2677750e-11, 8.9815216e-10,\n",
              "       1.9762787e-09, 3.2522791e-09, 1.2279774e-09, 2.0664779e-09,\n",
              "       5.5782376e-08, 2.0252655e-08, 4.6031203e-04, 3.9694276e-10,\n",
              "       3.0120055e-09, 3.3082934e-09, 3.3054992e-09, 1.1923937e-09,\n",
              "       2.2680631e-09, 1.5265149e-09, 4.9289381e-09, 2.3094333e-09,\n",
              "       1.8945714e-09, 2.1536428e-09, 3.4118648e-09, 2.0505373e-09,\n",
              "       2.4018294e-09, 5.0712262e-10, 2.9609513e-09, 1.0646477e-08,\n",
              "       8.3958768e-10, 2.4830915e-09, 1.2662134e-09, 1.5288694e-09,\n",
              "       1.0283899e-09, 5.6649418e-10, 7.4212476e-09, 5.3764291e-09,\n",
              "       2.8657117e-09, 4.9830642e-09, 1.9219379e-09, 1.4399895e-09,\n",
              "       4.3831196e-09, 1.1546986e-09, 2.9054985e-09, 3.8059564e-09,\n",
              "       1.1358948e-09, 3.3285728e-09, 1.1905394e-07, 2.8424563e-09,\n",
              "       3.8466921e-10, 1.1423725e-04, 1.4614544e-07, 3.3335474e-09,\n",
              "       1.6921072e-09, 3.1528362e-09, 2.5037900e-06, 1.6473106e-05,\n",
              "       3.4411962e-09, 4.3587697e-08, 5.0884300e-06, 4.0408331e-08,\n",
              "       7.7947093e-11, 4.9929227e-12, 4.4492658e-09, 3.2991252e-07,\n",
              "       6.9226163e-09, 9.4500470e-09, 3.9898558e-07, 5.1169867e-11,\n",
              "       1.0317166e-12, 2.4220932e-04, 1.5404934e-05, 1.5278769e-05,\n",
              "       1.3847101e-10, 1.7038861e-09, 3.4947774e-11, 1.5444619e-09],\n",
              "      dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "THnimqZYKfa5"
      },
      "source": [
        "create_dataset()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yvO9kIDFS6ig"
      },
      "source": [
        "#Some Notes\n",
        "We added the python code from the lab page on the second cell of this project.\n",
        "- We changed the input to give our randomly generated data generated by genLoopPairs function. \n",
        "-  Changed the input chars to a for loop and adding variables, conditions, limits. \n",
        "- Changed the output chars to a while loop and added variables, conditions and limits. \n",
        "- Performed padding in the prepare_loop_strs function\n",
        "- Increased the embedded size and layer to support ASCII values. \n",
        "- Decreased some of the conditions to just greater than less than and equals to try improve the model. \n",
        "- Tried running the model and got up to 93% accuracy. \n",
        "- We changed optimizer for better accuracy. learning rate was too high\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ]
}